package uk.ac.open.kmi.fusion.index;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

import org.apache.log4j.Logger;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.Fieldable;
import org.apache.lucene.index.CorruptIndexException;
import org.apache.lucene.index.IndexReader.FieldOption;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.Term;
import org.apache.lucene.queryParser.MultiFieldQueryParser;
import org.apache.lucene.queryParser.ParseException;
import org.apache.lucene.queryParser.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TermsFilter;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.RAMDirectory;
import org.apache.lucene.util.Version;
import org.openrdf.model.Resource;
import org.openrdf.model.Statement;
import org.openrdf.model.URI;
import org.openrdf.model.vocabulary.RDF;
import org.openrdf.model.vocabulary.RDFS;
import org.openrdf.repository.RepositoryConnection;
import org.openrdf.repository.RepositoryException;

import uk.ac.open.kmi.fusion.FusionMetaVocabulary;
import uk.ac.open.kmi.fusion.api.ILuceneBlocker;
import uk.ac.open.kmi.fusion.api.impl.FusionEnvironment;
import uk.ac.open.kmi.fusion.util.FusionException;

public class LuceneMemoryIndexerAllFieldsOld extends AbstractLuceneIndexer {

	public static final String TYPE_URI = FusionMetaVocabulary.LUCENE_MEMORY_BLOCKER_ALL_FIELDS;
	
	private Logger log = Logger.getLogger(LuceneMemoryIndexerAllFields.class);
	private String[] fieldNames;
	
	private boolean refresh = true;
	
	public LuceneMemoryIndexerAllFieldsOld() throws FusionException {
		super();
		this.createIndex();
	}
	
	

	public LuceneMemoryIndexerAllFieldsOld(Resource rdfIndividual,
			FusionEnvironment environment) throws FusionException {
		super(rdfIndividual, environment);
		this.createIndex();
	}

	@Override
	public void readFromRDFIndividual(RepositoryConnection connection)
			throws RepositoryException {
		// TODO Auto-generated method stub
		super.readFromRDFIndividual(connection);
	}

	@Override
	protected void readFromPropertyMember(Statement statement)
			throws RepositoryException {
		// TODO Auto-generated method stub
		super.readFromPropertyMember(statement);
	}
	
	@Override
	public Map<String, Document> findClosestDocuments(
			Map<String, List<String>> searchFieldValues, String[] searchFields, double threshold, 
			String type) throws IOException {
		
		Map<String, Document> docs = new HashMap<String, Document>();
	    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);
    
	    try {
	    	List<String> allFieldValues = new LinkedList<String>();
	    	for(String key : searchFieldValues.keySet()) {
	    		allFieldValues.addAll(searchFieldValues.get(key));
	    	}
	    	
	    	String queryString = getTransducedQuery(AbstractLuceneIndexer.getConcatenatedString(allFieldValues));
	    	Query query = null;
    		QueryParser queryParser = new MultiFieldQueryParser(Version.LUCENE_30, searchFields, analyzer);
    		query = queryParser.parse(queryString);
    				    
    		TopDocs hits;
    		
    		if(type==null) {
    			hits = indexSearcher.search(query, this.getCutOff());
    		} else {
    			TermsFilter filter = new TermsFilter();
    			filter.addTerm(new Term(RDF.TYPE.toString(), type));
    			hits = indexSearcher.search(query, filter, this.getCutOff());
    		}
	    			    		
    		if(hits.totalHits>0) {
	    		Document doc;
		    		
	    		for(int i=0;i<hits.scoreDocs.length;i++) {
	    			if((hits.scoreDocs[i].score>=threshold)) {
	    				doc = indexSearcher.doc(hits.scoreDocs[i].doc);
	    				docs.put(doc.get("uri"), doc);
	    			} else {
	    				break;
	    			}
	    		}
    		}
	    } catch(ParseException e) {
	    	e.printStackTrace();
	    }
			
		return docs;
		

	}
	
	@Override
	public Map<String, Document> findClosestDocuments(
			Map<String, List<String>> fields, double threshold, 
			String type) throws IOException {
		return findClosestDocuments(fields, this.fieldNames, threshold, type);
	}
	
	@Override
	public void closeIndex() throws FusionException {
		try {
			this.indexWriter.optimize();
			this.indexWriter.close();
			
		} catch(IOException e) {
			throw new FusionException(e);
		}

	}

	@Override
	public void openIndex() throws FusionException {
		if(this.indexWriter==null) {
			createIndex();
		} 
	}

	@Override
	public void createIndex() throws FusionException {
		try {
			this.directory = new RAMDirectory();
			this.indexWriter = new IndexWriter(directory, new StandardAnalyzer(Version.LUCENE_30), IndexWriter.MaxFieldLength.UNLIMITED);
		} catch(IOException e ) {
			String message = "I/O error when creating the Indexer.";
			log.error(message);
			throw new FusionException(message, e);
		}

	}
	
	@Override
	public void refreshSearcher() throws FusionException {
		
		if(directory==null) {
			createIndex();
			
		}
		try {
			this.indexSearcher = new IndexSearcher(directory);
			Set<String> fieldNameCollection = new HashSet<String>(this.indexSearcher.getIndexReader().getFieldNames(FieldOption.ALL));
			fieldNameCollection.remove("uri");
			fieldNameCollection.remove(RDF.TYPE.toString());
			this.fieldNames = new String[fieldNameCollection.size()];
			this.fieldNames = fieldNameCollection.toArray(this.fieldNames);
		} catch(IOException e) {
			throw new FusionException(e);
		}
		
	}

	/*public void addDocument(Document doc, String type) throws CorruptIndexException, IOException {
		
		Document internalDoc = new Document();
		
		List<Fieldable> fields = doc.getFields();
		
		Field f;
		String val;
		Set<String> tokens;
		for(Fieldable field : fields) {
			if((field.name().equals("uri"))||(field.name().equals(RDF.TYPE.toString()))) {
				internalDoc.add(new Field(field.name(), field.stringValue(), Field.Store.YES, Field.Index.NOT_ANALYZED));
			} else {
				internalDoc.add(new Field(field.name(), field.stringValue(), Field.Store.YES, Field.Index.ANALYZED));
			}
			internalDoc.add(field);
			
		}
		internalDoc.add(new Field(RDF.TYPE.toString(), type, Field.Store.YES, Field.Index.NOT_ANALYZED));
		this.indexWriter.addDocument(internalDoc);
		
	}*/

	@Override
	public void addIndividual(URI ind, RepositoryConnection con)
			throws RepositoryException {
		// TODO Auto-generated method stub
		
	}

}
